-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


ALTER TABLE IF EXISTS public.favorite DROP CONSTRAINT IF EXISTS "favorite_idUser_fkey";

ALTER TABLE IF EXISTS public.favorite DROP CONSTRAINT IF EXISTS "user";

ALTER TABLE IF EXISTS public.group_movie DROP CONSTRAINT IF EXISTS group_movie_group_idgroup_fkey;

ALTER TABLE IF EXISTS public.groups DROP CONSTRAINT IF EXISTS group_idcreator_fkey;

ALTER TABLE IF EXISTS public.review DROP CONSTRAINT IF EXISTS "user";

ALTER TABLE IF EXISTS public.showtime DROP CONSTRAINT IF EXISTS showtime_group_idgroup_fkey;

ALTER TABLE IF EXISTS public.user_group DROP CONSTRAINT IF EXISTS user_group_group_idgroup_fkey;

ALTER TABLE IF EXISTS public.user_group DROP CONSTRAINT IF EXISTS user_group_user_iduser_fkey;



DROP TABLE IF EXISTS public.favorite;

CREATE TABLE IF NOT EXISTS public.favorite
(
    "idFavorite" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "idUser" integer NOT NULL,
    "idMovie" integer NOT NULL,
    CONSTRAINT favorite_pkey PRIMARY KEY ("idFavorite")
);

DROP TABLE IF EXISTS public.group_movie;

CREATE TABLE IF NOT EXISTS public.group_movie
(
    group_idgroup integer NOT NULL,
    "movie_idMovie" integer NOT NULL,
    CONSTRAINT group_movie_pkey PRIMARY KEY (group_idgroup, "movie_idMovie")
);

DROP TABLE IF EXISTS public.groups;

CREATE TABLE IF NOT EXISTS public.groups
(
    idgroup integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    idcreator integer NOT NULL,
    groupname character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT group_pkey PRIMARY KEY (idgroup)
);

DROP TABLE IF EXISTS public.migrations;

CREATE TABLE IF NOT EXISTS public.migrations
(
    id integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    hash character varying(40) COLLATE pg_catalog."default" NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT migrations_pkey PRIMARY KEY (id),
    CONSTRAINT migrations_name_key UNIQUE (name)
);

DROP TABLE IF EXISTS public.review;

CREATE TABLE IF NOT EXISTS public.review
(
    "idReview" integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "idMovie" integer NOT NULL,
    "idUser" integer NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    rating smallint NOT NULL,
    datetime date NOT NULL,
    CONSTRAINT review_pkey PRIMARY KEY ("idReview")
);

DROP TABLE IF EXISTS public.showtime;

CREATE TABLE IF NOT EXISTS public.showtime
(
    "idEvent" integer NOT NULL,
    "idShow" integer NOT NULL,
    "idGroup" integer NOT NULL,
    CONSTRAINT showtime_pkey PRIMARY KEY ("idEvent")
);

DROP TABLE IF EXISTS public.user_group;

CREATE TABLE IF NOT EXISTS public.user_group
(
    user_iduser integer NOT NULL,
    group_idgroup integer NOT NULL,
    grouprequest grouprequeststatus DEFAULT 'pending'::grouprequeststatus,
    CONSTRAINT user_group_pkey PRIMARY KEY (user_iduser, group_idgroup)
);

DROP TABLE IF EXISTS public.users;

CREATE TABLE IF NOT EXISTS public.users
(
    iduser integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    password character varying(60) COLLATE pg_catalog."default" NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT user_pkey PRIMARY KEY (iduser),
    CONSTRAINT unique_email UNIQUE (email)
);

ALTER TABLE IF EXISTS public.favorite
    ADD CONSTRAINT "favorite_idUser_fkey" FOREIGN KEY ("idUser")
    REFERENCES public.users (iduser) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.favorite
    ADD CONSTRAINT "user" FOREIGN KEY ("idUser")
    REFERENCES public.users (iduser) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.group_movie
    ADD CONSTRAINT group_movie_group_idgroup_fkey FOREIGN KEY (group_idgroup)
    REFERENCES public.groups (idgroup) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.groups
    ADD CONSTRAINT group_idcreator_fkey FOREIGN KEY (idcreator)
    REFERENCES public.users (iduser) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.review
    ADD CONSTRAINT "user" FOREIGN KEY ("idUser")
    REFERENCES public.users (iduser) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.showtime
    ADD CONSTRAINT showtime_group_idgroup_fkey FOREIGN KEY ("idGroup")
    REFERENCES public.groups (idgroup) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.user_group
    ADD CONSTRAINT user_group_group_idgroup_fkey FOREIGN KEY (group_idgroup)
    REFERENCES public.groups (idgroup) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.user_group
    ADD CONSTRAINT user_group_user_iduser_fkey FOREIGN KEY (user_iduser)
    REFERENCES public.users (iduser) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;

END;